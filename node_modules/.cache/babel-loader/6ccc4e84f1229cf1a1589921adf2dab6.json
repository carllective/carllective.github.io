{"ast":null,"code":"import { getBlobFromURL } from './getBlobFromURL';\nimport { getMimeType, isDataUrl, makeDataUrl, resolveUrl } from './util';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g;\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nexport function toRegex(url) {\n  // eslint-disable-next-line no-useless-escape\n  const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n  return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g');\n}\nexport function parseURLs(cssText) {\n  const result = [];\n  cssText.replace(URL_REGEX, (raw, quotation, url) => {\n    result.push(url);\n    return raw;\n  });\n  return result.filter(url => !isDataUrl(url));\n}\nexport function embed(cssText, resourceURL, baseURL, options, get) {\n  const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n  return Promise.resolve(resolvedURL).then(url => get ? get(url) : getBlobFromURL(url, options)).then(data => {\n    if (typeof data === 'string') {\n      return makeDataUrl(data, getMimeType(resourceURL));\n    }\n\n    return makeDataUrl(data.blob, getMimeType(resourceURL) || data.contentType);\n  }).then(dataURL => cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`)).then(content => content, () => resolvedURL);\n}\n\nfunction filterPreferredFontFormat(str, {\n  preferredFontFormat\n}) {\n  return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, match => {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const [src,, format] = URL_WITH_FORMAT_REGEX.exec(match) || [];\n\n      if (!format) {\n        return '';\n      }\n\n      if (format === preferredFontFormat) {\n        return `src: ${src};`;\n      }\n    }\n  });\n}\n\nexport function shouldEmbed(url) {\n  return url.search(URL_REGEX) !== -1;\n}\nexport async function embedResources(cssText, baseUrl, options) {\n  if (!shouldEmbed(cssText)) {\n    return Promise.resolve(cssText);\n  }\n\n  const filteredCSSText = filterPreferredFontFormat(cssText, options);\n  return Promise.resolve(filteredCSSText).then(parseURLs).then(urls => urls.reduce((deferred, url) => // eslint-disable-next-line promise/no-nesting\n  deferred.then(css => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText)));\n}","map":{"version":3,"mappings":"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","names":["getBlobFromURL","getMimeType","isDataUrl","makeDataUrl","resolveUrl","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","toRegex","url","escaped","replace","RegExp","parseURLs","cssText","result","raw","quotation","push","filter","embed","resourceURL","baseURL","options","get","resolvedURL","Promise","resolve","then","data","blob","contentType","dataURL","content","filterPreferredFontFormat","str","preferredFontFormat","match","src","format","exec","shouldEmbed","search","embedResources","baseUrl","filteredCSSText","urls","reduce","deferred","css"],"sourceRoot":"","sources":["../src/embedResources.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}