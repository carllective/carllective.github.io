{"ast":null,"code":"import { cloneNode } from './cloneNode';\nimport { embedImages } from './embedImages';\nimport { applyStyleWithOptions } from './applyStyleWithOptions';\nimport { embedWebFonts, getWebFontCSS } from './embedWebFonts';\nimport { getNodeWidth, getNodeHeight, getPixelRatio, createImage, canvasToBlob, nodeToDataURL } from './util';\n\nfunction getImageSize(node, options = {}) {\n  const width = options.width || getNodeWidth(node);\n  const height = options.height || getNodeHeight(node);\n  return {\n    width,\n    height\n  };\n}\n\nexport async function toSvg(node, options = {}) {\n  const {\n    width,\n    height\n  } = getImageSize(node, options);\n  return Promise.resolve(node).then(nativeNode => cloneNode(nativeNode, options, true)).then(clonedNode => embedWebFonts(clonedNode, options)).then(clonedNode => embedImages(clonedNode, options)).then(clonedNode => applyStyleWithOptions(clonedNode, options)).then(clonedNode => nodeToDataURL(clonedNode, width, height));\n}\nconst dimensionCanvasLimit = 16384; // as per https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#maximum_canvas_size\n\nfunction checkCanvasDimensions(canvas) {\n  if (canvas.width > dimensionCanvasLimit || canvas.height > dimensionCanvasLimit) {\n    if (canvas.width > dimensionCanvasLimit && canvas.height > dimensionCanvasLimit) {\n      if (canvas.width > canvas.height) {\n        canvas.height *= dimensionCanvasLimit / canvas.width;\n        canvas.width = dimensionCanvasLimit;\n      } else {\n        canvas.width *= dimensionCanvasLimit / canvas.height;\n        canvas.height = dimensionCanvasLimit;\n      }\n    } else if (canvas.width > dimensionCanvasLimit) {\n      canvas.height *= dimensionCanvasLimit / canvas.width;\n      canvas.width = dimensionCanvasLimit;\n    } else {\n      canvas.width *= dimensionCanvasLimit / canvas.height;\n      canvas.height = dimensionCanvasLimit;\n    }\n  }\n}\n\nexport async function toCanvas(node, options = {}) {\n  return toSvg(node, options).then(createImage).then(img => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    const ratio = options.pixelRatio || getPixelRatio();\n    const {\n      width,\n      height\n    } = getImageSize(node, options);\n    const canvasWidth = options.canvasWidth || width;\n    const canvasHeight = options.canvasHeight || height;\n    canvas.width = canvasWidth * ratio;\n    canvas.height = canvasHeight * ratio;\n\n    if (!options.skipAutoScale) {\n      checkCanvasDimensions(canvas);\n    }\n\n    canvas.style.width = `${canvasWidth}`;\n    canvas.style.height = `${canvasHeight}`;\n\n    if (options.backgroundColor) {\n      context.fillStyle = options.backgroundColor;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    return canvas;\n  });\n}\nexport async function toPixelData(node, options = {}) {\n  const {\n    width,\n    height\n  } = getImageSize(node, options);\n  return toCanvas(node, options).then(canvas => {\n    const ctx = canvas.getContext('2d');\n    return ctx.getImageData(0, 0, width, height).data;\n  });\n}\nexport async function toPng(node, options = {}) {\n  return toCanvas(node, options).then(canvas => canvas.toDataURL());\n}\nexport async function toJpeg(node, options = {}) {\n  return toCanvas(node, options).then(canvas => canvas.toDataURL('image/jpeg', options.quality || 1));\n}\nexport async function toBlob(node, options = {}) {\n  return toCanvas(node, options).then(canvasToBlob);\n}\nexport async function getFontEmbedCSS(node, options = {}) {\n  return getWebFontCSS(node, options);\n}","map":{"version":3,"mappings":"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","names":["cloneNode","embedImages","applyStyleWithOptions","embedWebFonts","getWebFontCSS","getNodeWidth","getNodeHeight","getPixelRatio","createImage","canvasToBlob","nodeToDataURL","getImageSize","node","options","width","height","toSvg","Promise","resolve","then","nativeNode","clonedNode","dimensionCanvasLimit","checkCanvasDimensions","canvas","toCanvas","img","document","createElement","context","getContext","ratio","pixelRatio","canvasWidth","canvasHeight","skipAutoScale","style","backgroundColor","fillStyle","fillRect","drawImage","toPixelData","ctx","getImageData","data","toPng","toDataURL","toJpeg","quality","toBlob","getFontEmbedCSS"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}