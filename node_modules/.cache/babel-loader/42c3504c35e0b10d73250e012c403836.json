{"ast":null,"code":"import { parseDataUrlContent } from './util';\nconst cache = {};\n\nfunction getCacheKey(url, includeQueryParams) {\n  let key = url.replace(/\\?.*/, '');\n\n  if (includeQueryParams) {\n    key = url;\n  } // font resource\n\n\n  if (/ttf|otf|eot|woff2?/i.test(key)) {\n    key = key.replace(/.*\\//, '');\n  }\n\n  return key;\n}\n\nexport function getBlobFromURL(url, options) {\n  const cacheKey = getCacheKey(url, options.includeQueryParams);\n\n  if (cache[cacheKey] != null) {\n    return cache[cacheKey];\n  } // cache bypass, we don't have CORS issues with cached images\n  // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n\n\n  if (options.cacheBust) {\n    // eslint-disable-next-line no-param-reassign\n    url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n  }\n\n  const failed = reason => {\n    let placeholder = '';\n\n    if (options.imagePlaceholder) {\n      const parts = options.imagePlaceholder.split(/,/);\n\n      if (parts && parts[1]) {\n        placeholder = parts[1];\n      }\n    }\n\n    let msg = `Failed to fetch resource: ${url}`;\n\n    if (reason) {\n      msg = typeof reason === 'string' ? reason : reason.message;\n    }\n\n    if (msg) {\n      console.error(msg);\n    }\n\n    return {\n      blob: placeholder,\n      contentType: ''\n    };\n  };\n\n  const deferred = window.fetch(url, options.fetchRequestInit).then(res => // eslint-disable-next-line promise/no-nesting\n  res.blob().then(blob => ({\n    blob,\n    contentType: res.headers.get('Content-Type') || ''\n  }))).then(({\n    blob,\n    contentType\n  }) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onloadend = () => resolve({\n      contentType,\n      blob: reader.result\n    });\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  })).then(({\n    blob,\n    contentType\n  }) => ({\n    contentType,\n    blob: parseDataUrlContent(blob)\n  })) // on failed\n  .catch(failed); // cache result\n\n  cache[cacheKey] = deferred;\n  return deferred;\n}","map":{"version":3,"mappings":"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","names":["parseDataUrlContent","cache","getCacheKey","url","includeQueryParams","key","replace","test","getBlobFromURL","options","cacheKey","cacheBust","Date","getTime","failed","reason","placeholder","imagePlaceholder","parts","split","msg","message","console","error","blob","contentType","deferred","window","fetch","fetchRequestInit","then","res","headers","get","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","catch"],"sourceRoot":"","sources":["../src/getBlobFromURL.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}