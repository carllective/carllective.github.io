{"ast":null,"code":"import { getBlobFromURL } from './getBlobFromURL';\nimport { clonePseudoElements } from './clonePseudoElements';\nimport { createImage, getMimeType, makeDataUrl, toArray } from './util';\n\nasync function cloneCanvasElement(node) {\n  const dataURL = node.toDataURL();\n\n  if (dataURL === 'data:,') {\n    return Promise.resolve(node.cloneNode(false));\n  }\n\n  return createImage(dataURL);\n}\n\nasync function cloneVideoElement(node, options) {\n  return Promise.resolve(node.poster).then(url => getBlobFromURL(url, options)).then(data => makeDataUrl(data.blob, getMimeType(node.poster) || data.contentType)).then(dataURL => createImage(dataURL));\n}\n\nasync function cloneSingleNode(node, options) {\n  if (node instanceof HTMLCanvasElement) {\n    return cloneCanvasElement(node);\n  }\n\n  if (node instanceof HTMLVideoElement && node.poster) {\n    return cloneVideoElement(node, options);\n  }\n\n  return Promise.resolve(node.cloneNode(false));\n}\n\nconst isSlotElement = node => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';\n\nasync function cloneChildren(nativeNode, clonedNode, options) {\n  var _a;\n\n  const children = isSlotElement(nativeNode) && nativeNode.assignedNodes ? toArray(nativeNode.assignedNodes()) : toArray(((_a = nativeNode.shadowRoot) !== null && _a !== void 0 ? _a : nativeNode).childNodes);\n\n  if (children.length === 0 || nativeNode instanceof HTMLVideoElement) {\n    return Promise.resolve(clonedNode);\n  }\n\n  return children.reduce((deferred, child) => deferred // eslint-disable-next-line no-use-before-define\n  .then(() => cloneNode(child, options)).then(clonedChild => {\n    // eslint-disable-next-line promise/always-return\n    if (clonedChild) {\n      clonedNode.appendChild(clonedChild);\n    }\n  }), Promise.resolve()).then(() => clonedNode);\n}\n\nfunction cloneCSSStyle(nativeNode, clonedNode) {\n  const source = window.getComputedStyle(nativeNode);\n  const target = clonedNode.style;\n\n  if (!target) {\n    return;\n  }\n\n  if (source.cssText) {\n    target.cssText = source.cssText;\n    target.transformOrigin = source.transformOrigin;\n  } else {\n    toArray(source).forEach(name => {\n      let value = source.getPropertyValue(name);\n\n      if (name === 'font-size' && value.endsWith('px')) {\n        const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;\n        value = `${reducedFont}px`;\n      }\n\n      target.setProperty(name, value, source.getPropertyPriority(name));\n    });\n  }\n}\n\nfunction cloneInputValue(nativeNode, clonedNode) {\n  if (nativeNode instanceof HTMLTextAreaElement) {\n    clonedNode.innerHTML = nativeNode.value;\n  }\n\n  if (nativeNode instanceof HTMLInputElement) {\n    clonedNode.setAttribute('value', nativeNode.value);\n  }\n}\n\nfunction cloneSelectValue(nativeNode, clonedNode) {\n  if (nativeNode instanceof HTMLSelectElement) {\n    const clonedSelect = clonedNode;\n    const selectedOption = Array.from(clonedSelect.children).find(child => nativeNode.value === child.getAttribute('value'));\n\n    if (selectedOption) {\n      selectedOption.setAttribute('selected', '');\n    }\n  }\n}\n\nasync function decorate(nativeNode, clonedNode) {\n  if (!(clonedNode instanceof Element)) {\n    return Promise.resolve(clonedNode);\n  }\n\n  return Promise.resolve().then(() => cloneCSSStyle(nativeNode, clonedNode)).then(() => clonePseudoElements(nativeNode, clonedNode)).then(() => cloneInputValue(nativeNode, clonedNode)).then(() => cloneSelectValue(nativeNode, clonedNode)).then(() => clonedNode);\n}\n\nexport async function cloneNode(node, options, isRoot) {\n  if (!isRoot && options.filter && !options.filter(node)) {\n    return Promise.resolve(null);\n  }\n\n  return Promise.resolve(node).then(clonedNode => cloneSingleNode(clonedNode, options)).then(clonedNode => cloneChildren(node, clonedNode, options)).then(clonedNode => decorate(node, clonedNode));\n}","map":{"version":3,"mappings":"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","names":["getBlobFromURL","clonePseudoElements","createImage","getMimeType","makeDataUrl","toArray","cloneCanvasElement","node","dataURL","toDataURL","Promise","resolve","cloneNode","cloneVideoElement","options","poster","then","url","data","blob","contentType","cloneSingleNode","HTMLCanvasElement","HTMLVideoElement","isSlotElement","tagName","toUpperCase","cloneChildren","nativeNode","clonedNode","children","assignedNodes","shadowRoot","_a","childNodes","length","reduce","deferred","child","clonedChild","appendChild","cloneCSSStyle","source","window","getComputedStyle","target","style","cssText","transformOrigin","forEach","name","value","getPropertyValue","endsWith","reducedFont","Math","floor","parseFloat","substring","setProperty","getPropertyPriority","cloneInputValue","HTMLTextAreaElement","innerHTML","HTMLInputElement","setAttribute","cloneSelectValue","HTMLSelectElement","clonedSelect","selectedOption","Array","from","find","getAttribute","decorate","Element","isRoot","filter"],"sourceRoot":"","sources":["../src/cloneNode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}